---
layout: csPost
title:  "CodeU Interview Tricks"
subtitle: "不愧是大公司，如此系统的面试培训方便跳槽吗"
categories: [cs]
classification: [cs-miscellany]
identifier:
  - About_Google
  - Five_steps
  - Hint
  - Optimization
---

<h2 id="About_Google"> 关于谷歌面试 </h2>

&#160; &#160; 在谷歌的面试有一点不一样。它不是一个你问我答的对话，而是一个合作的过程。面试官给你一个问题，你们一起寻找一个解决方案，就像在一个组里和队友一起解决问题一样。大部分面试官不会为难你，而是想和你一起找答案。比起面试题的答案，他们更想知道你是怎么去思考这个问题的，你会不会从面试官的提示中获得灵感，从而判断你会不会是一个好的合作对象。

<br>

<h2 id="Five_steps"> 应对面试问题的五个步骤 </h2>

- Step 0: Clarify
  - 这一步想看你对问题有没有深入的理解。我觉得深入的意思是指，有没有识别出解决问题所需要的所有资源，一些corner case可能出现的情况。换句话说，有没有正确地理解问题需求。
  - Example可以很好地证明你明白了题目，也方便之后的思考和验证。
- Step 1: Strategy
  - 口头上描述你想怎么解决这个问题。
  - 请务必想到什么解决方案都说出来，最好能说清楚每种解决方案的trade off. 我的面试官告诉我，这是cs，是一门没有唯一解的学科。解决方案总会在一些地方费时，在另一些地方表现优异。这个时候，面试官会告诉你我们现在需要哪方面的优化，我们可以接受哪方面的trade off. 这样的讨论才使得这个步骤成为最重要的步骤。
- Step 2: Implementation
  - 没什么好说的，写就是了。
  - 大概10到20分钟。
- Step 3: Dry run/prove that this works
  - 可以用step 0里举出的例子向面试官展示你的码可行。可以用comment把一些变量的值写在后面。
  - 大概2到5分钟。
- Step 4: Edge cases, unit tests
  - 我觉得写完之后再处理edge case很符合我的写码习惯，毕竟在implement的时候很难兼顾那么多。不过我的coach提到如果在写的时候想到corner case但不想思路被打断的话可以写一个``` //TODO: fix...```，等到这个步骤的时候再进行完善。

<br>

<h2 id="Hint"> 提示 </h2>
&#160; &#160; 因为谷歌的面试是合作式的，所以面试官会给提示。提示有的时候不像提示，所以顺着面试官说的做就对了。
&#160; &#160; 关于提示，或者我觉得这种提示才是面试中的考验，面试官会希望你是一个积极合作的人，所以在应对面试官提出的request要积极地去思考，给出更好更合理的方案。我的coach告诉我，应对提示有三种，一种是说，好的我来试试。这种人当然很棒。另一种是说，我一会儿试试你的，但我想先看看我的可不可行。这种人很有探究精神也很棒。最要不得的是第三种，对提示置之不理我行我素，一看就不是合适的合作对象。

<br>

<h2 id="Optimization"> 优化 </h2>
&#160; &#160; 我这次的面试题本质上是一个全排列，但是我的第一反应是用前缀树。Overthink可能是我最大的毛病了。对此我的coach给我的建议是，先要能跑，并且知道能跑的东西的优缺点。他说在实际中优化是很少的一个部分。如果有已知的优化结构的话能拿来用是很好的，不过如果你是为了这个问题创造出了一个新的算法或者数据结构：you need to rethink about it. 毕竟咱不要发paper.
